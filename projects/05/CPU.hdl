// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode
    And(a=instruction[15], b=true, out=cInstruction);
    Not(in=instruction[15], out=aInstruction);
    And(a=instruction[0], b=cInstruction, out=j3);
    And(a=instruction[1], b=cInstruction, out=j2);
    And(a=instruction[2], b=cInstruction, out=j1);
    And(a=instruction[3], b=cInstruction, out=d3);
    And(a=instruction[4], b=cInstruction, out=d2);
    And(a=instruction[5], b=cInstruction, out=d1);
    And(a=instruction[6], b=cInstruction, out=c6);
    And(a=instruction[7], b=cInstruction, out=c5);
    And(a=instruction[8], b=cInstruction, out=c4);
    And(a=instruction[9], b=cInstruction, out=c3);
    And(a=instruction[10], b=cInstruction, out=c2);
    And(a=instruction[11], b=cInstruction, out=c1);
    And(a=instruction[12], b=cInstruction, out=a);

    // ALU
    Mux16(a=ALUOut, b=instruction, sel=aInstruction, out=aIn);
    Or(a=d1, b=aInstruction, out=loadA);
    ARegister(in=aIn, load=loadA, out=aOut, out[0..14]=addressM);
    Mux16(a=aOut, b=inM, sel=a, out=aOrM);
    DRegister(in=ALUOut, load=d2, out=dOut);
    ALU(x=dOut, y=aOrM,
        zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
        out=outM, out=ALUOut, zr=outputZero, ng=outputNegative);

    // Jump
    Or(a=outputNegative, b=outputZero, out=outputNegativeOrZero);
    Not(in=outputNegativeOrZero, out=outputPositive);
    And(a=j3, b=outputPositive, out=jumpPositive);
    And(a=j2, b=outputZero, out=jumpZero);
    And(a=j1, b=outputNegative, out=jumpNegative);
    Or(a=jumpPositive, b=jumpZero, out=jumpPositiveOrZero);
    Or(a=jumpPositiveOrZero, b=jumpNegative, out=jump);

    // Set PC
    PC(in=aOut, load=jump, inc=true, reset=reset, out[0..14]=pc);

    // Write
    And(a=d3, b=true, out=writeM);
}
